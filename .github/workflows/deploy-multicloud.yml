name: Multi-Cloud Smart Deploy

on:
  push:
    branches: [ master ]

env:
  IMAGE_NAME: django-app
  GCP_PROJECT_ID: nci-research-project
  GCP_REGION: europe-west1
  AZURE_RESOURCE_GROUP: nci-azure-rg
  AZURE_AKS_CLUSTER: nci-aks-cluster
  AZURE_ACR_NAME: nciregistryacr
  AZURE_STORAGE_ACCOUNT: nciresearchstorage
  GCP_LOG_BUCKET: nci-deployment-logs
  AZURE_LOG_CONTAINER: deployment-logs
  AWS_REGION: eu-west-1
  AWS_LOG_BUCKET: nci-multicloud-logs-bucket
  USE_GKE_GCLOUD_AUTH_PLUGIN: "True"

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Set Image Tag
        id: set-tag
        run: echo "tag=commit-${{ github.sha }}" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}
      - run: az acr login --name ${{ env.AZURE_ACR_NAME }}

      - name: Parse AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=$(echo '${{ secrets.AWS_KEY }}' | jq -r .AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo '${{ secrets.AWS_KEY }}' | jq -r .SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$(echo '${{ secrets.AWS_KEY }}' | jq -r .AccountId)" >> $GITHUB_ENV

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Docker login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS \
            --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build & Push Images
        run: |
          docker build -t europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }} \
                       -t ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }} \
                       -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }} .

          docker push europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}
          docker push ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}

  check-logs-exist:
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      logs_exist: ${{ steps.check.outputs.logs_exist }}
    steps:
      - uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: gsutil

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}

      - name: Parse AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=$(echo '${{ secrets.AWS_KEY }}' | jq -r .AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo '${{ secrets.AWS_KEY }}' | jq -r .SecretAccessKey)" >> $GITHUB_ENV
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Check if logs exist
        id: check
        run: |
          count=0
          gsutil ls gs://${{ env.GCP_LOG_BUCKET }}/deploy-log-gcp-* && count=$((count+1)) || true
          az storage blob list --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
            --container-name ${{ env.AZURE_LOG_CONTAINER }} \
            --account-key ${{ secrets.AZURE_STORAGE_KEY }} | grep -q deploy-log-azure- && count=$((count+1)) || true
          aws s3 ls s3://${{ env.AWS_LOG_BUCKET }}/deploy-log-aws-* && count=$((count+1)) || true

          if [ "$count" -eq 0 ]; then
            echo "logs_exist=false" >> $GITHUB_OUTPUT
          else
            echo "logs_exist=true" >> $GITHUB_OUTPUT
          fi

  deploy-initial:
    needs: [build-and-push, check-logs-exist]
    if: needs.check-logs-exist.outputs.logs_exist == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: gke-gcloud-auth-plugin
      - run: gcloud container clusters get-credentials nci-research-cluster --region ${{ env.GCP_REGION }} --project ${{ env.GCP_PROJECT_ID }}
      - run: |
          START=$(date -u +%s)
          kubectl apply -f k8s/gcp/
          kubectl set image deployment/django-app django-container=europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
          kubectl rollout status deployment django-app
          END=$(date -u +%s)
          echo "GCP,$START,$END,$((END-START)),success" > log.csv
          gsutil cp log.csv gs://${{ env.GCP_LOG_BUCKET }}/deploy-log-gcp-${{ github.run_id }}.csv

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}
      - uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AZURE_AKS_CLUSTER }}
      - run: |
          START=$(date -u +%s)
          kubectl apply -f k8s/azure/
          kubectl set image deployment/django-app django-container=${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
          kubectl rollout status deployment django-app
          END=$(date -u +%s)
          echo "Azure,$START,$END,$((END-START)),success" > log.csv
          az storage blob upload --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
            --container-name ${{ env.AZURE_LOG_CONTAINER }} \
            --name deploy-log-azure-${{ github.run_id }}.csv \
            --file log.csv --auth-mode key --account-key ${{ secrets.AZURE_STORAGE_KEY }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      - run: aws eks update-kubeconfig --name nci-research-eks --region ${{ env.AWS_REGION }}
      - run: |
          START=$(date -u +%s)
          kubectl apply -f k8s/aws/
          kubectl set image deployment/django-app django-container=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
          kubectl rollout status deployment django-app
          END=$(date -u +%s)
          echo "AWS,$START,$END,$((END-START)),success" > log.csv
          aws s3 cp log.csv s3://${{ env.AWS_LOG_BUCKET }}/deploy-log-aws-${{ github.run_id }}.csv

  collect-logs:
    needs: [check-logs-exist, deploy-initial]
    if: |
      needs.check-logs-exist.outputs.logs_exist == 'true' ||
      always() && needs.check-logs-exist.outputs.logs_exist == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: pip install pandas

      - uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: gsutil

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}

      - name: Parse AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=$(echo '${{ secrets.AWS_KEY }}' | jq -r .AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo '${{ secrets.AWS_KEY }}' | jq -r .SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$(echo '${{ secrets.AWS_KEY }}' | jq -r .AccountId)" >> $GITHUB_ENV
          
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Download logs and merge
        run: |
          mkdir -p logs
          gsutil cp "gs://${{ env.GCP_LOG_BUCKET }}/deploy-log-gcp-*.csv" logs/ || echo "No GCP logs"
          az storage blob download-batch --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
            --destination logs --source ${{ env.AZURE_LOG_CONTAINER }} \
            --pattern deploy-log-azure-*.csv \
            --account-key ${{ secrets.AZURE_STORAGE_KEY }} || echo "No Azure logs"
          aws s3 cp s3://${{ env.AWS_LOG_BUCKET }}/ logs/ --recursive --exclude "*" --include "deploy-log-aws-*.csv" || echo "No AWS logs"
          echo "cloud,start_time,end_time,duration_seconds,status" > merged_logs.csv
          cat logs/*.csv | grep -v cloud >> merged_logs.csv
          gsutil cp merged_logs.csv gs://${{ env.GCP_LOG_BUCKET }}/merged_logs.csv

  AI-Model:
    needs: collect-logs
    if: needs.collect-logs.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      best_cloud: ${{ steps.read.outputs.best_cloud }}
    steps:
      - uses: actions/checkout@v3
      - uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: gsutil
      - run: |
          pip install pandas scikit-learn xgboost joblib
          gsutil cp gs://${{ env.GCP_LOG_BUCKET }}/merged_logs.csv .
          python scripts/train_model.py merged_logs.csv
      - id: read
        run: |
          echo "best_cloud=$(cat best_cloud.txt)" >> $GITHUB_OUTPUT

  deploy-gcp:
    needs: [build-and-push, AI-Model]
    if: needs.AI-Model.outputs.best_cloud == 'GCP'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: gke-gcloud-auth-plugin
      - run: gcloud container clusters get-credentials nci-research-cluster --region ${{ env.GCP_REGION }} --project ${{ env.GCP_PROJECT_ID }}
      - run: |
          kubectl apply -f k8s/gcp/
          kubectl set image deployment/django-app django-container=europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
          kubectl rollout status deployment django-app

  deploy-azure:
    needs: [build-and-push, AI-Model]
    if: needs.AI-Model.outputs.best_cloud == 'Azure'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}
      - uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AZURE_AKS_CLUSTER }}
      - run: |
          kubectl apply -f k8s/azure/
          kubectl set image deployment/django-app django-container=${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
          kubectl rollout status deployment django-app

  deploy-aws:
    needs: [build-and-push, AI-Model]
    if: needs.AI-Model.outputs.best_cloud == 'AWS'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      - run: aws eks update-kubeconfig --name nci-research-eks --region ${{ env.AWS_REGION }}
      - run: |
          kubectl apply -f k8s/aws/
          kubectl set image deployment/django-app django-container=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
          kubectl rollout status deployment django-app
