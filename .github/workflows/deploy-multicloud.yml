name: Multi-Cloud Deploy to GKE and AKS

on:
  push:
    branches:
      - master

env:
  IMAGE_TAG: commit-${{ github.sha }}
  IMAGE_NAME: django-app

jobs:
  deploy:
    name: Build & Deploy to GCP and Azure
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      ########################################
      # --------- GCP SETUP ---------------- #
      ########################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: nci-research-project

      - name: Configure Docker for GCP Artifact Registry
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Authenticate GKE Cluster
        run: |
          gcloud container clusters get-credentials nci-research-cluster \
            --region europe-west1 \
            --project nci-research-project

      ########################################
      # --------- AZURE SETUP -------------- #
      ########################################
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}

      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: nci-azure-rg
          cluster-name: nci-aks-cluster

      - name: Azure ACR Login
        run: az acr login --name nciregistryacr

      ########################################
      # --------- BUILD & PUSH ------------- #
      ########################################
      - name: Build Docker Images for GCP & Azure
        run: |
          docker build -t europe-west1-docker.pkg.dev/nci-research-project/django-repo/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
                       -t nciregistryacr.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push to GCP Artifact Registry
        run: docker push europe-west1-docker.pkg.dev/nci-research-project/django-repo/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Push to Azure ACR
        run: docker push nciregistryacr.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      ########################################
      # ------- DEPLOY TO GCP -------------- #
      ########################################
      - name: Deploy to GKE
        run: |
          kubectl config use-context gke_nci-research-project_europe-west1_nci-research-cluster
          if ! kubectl get deployment django-app &>/dev/null; then
            echo "Deployment not found in GKE. Applying k8s manifests..."
            kubectl apply -f k8s/
          fi
          kubectl set image deployment/django-app django-container=europe-west1-docker.pkg.dev/nci-research-project/django-repo/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          kubectl rollout status deployment/django-app

      ########################################
      # ------- DEPLOY TO AZURE ------------ #
      ########################################
      - name: Deploy to AKS
        run: |
          kubectl config use-context aks_nci-azure-rg_nci-aks-cluster
          if ! kubectl get deployment django-app &>/dev/null; then
            echo "Deployment not found in AKS. Applying k8s manifests..."
            kubectl apply -f k8s/
          fi
          kubectl set image deployment/django-app django-container=nciregistryacr.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          kubectl rollout status deployment/django-app

      ########################################
      # ------ CLEANUP OLD REPLICASETS ----- #
      ########################################
      - name: Clean up old ReplicaSets in GKE
        run: |
          kubectl config use-context gke_nci-research-project_europe-west1_nci-research-cluster
          CURRENT_RS=$(kubectl get rs -o=jsonpath='{.items[?(@.status.replicas==2)].metadata.name}')
          for rs in $(kubectl get rs --no-headers -o custom-columns=":metadata.name"); do
            if [[ "$rs" != "$CURRENT_RS" ]]; then
              kubectl delete rs $rs
            fi
          done

      - name: Clean up old ReplicaSets in AKS
        run: |
          kubectl config use-context aks_nci-azure-rg_nci-aks-cluster
          CURRENT_RS=$(kubectl get rs -o=jsonpath='{.items[?(@.status.replicas==2)].metadata.name}')
          for rs in $(kubectl get rs --no-headers -o custom-columns=":metadata.name"); do
            if [[ "$rs" != "$CURRENT_RS" ]]; then
              kubectl delete rs $rs
            fi
          done
