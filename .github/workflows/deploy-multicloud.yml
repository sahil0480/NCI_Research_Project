name: Multi-Cloud Deploy to GKE and AKS

on:
  push:
    branches:
      - master

env:
  IMAGE_TAG: commit-${{ github.sha }}
  IMAGE_NAME: django-app
  ASSIGN_GCP_ROLES: true
  ASSIGN_AZURE_ROLES: true
  GCP_SA_EMAIL: github-ci-cd@nci-research-project.iam.gserviceaccount.com
  GCP_PROJECT_ID: nci-research-project
  GCP_REGION: europe-west1
  AZURE_RESOURCE_GROUP: nci-azure-rg
  AZURE_AKS_CLUSTER: nci-aks-cluster
  AZURE_ACR_NAME: nciregistryacr

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      #################################################
      # ---------------- GCP SETUP ------------------ #
      #################################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker for GCP Artifact Registry
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Authenticate GKE Cluster
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet
          gcloud container clusters get-credentials nci-research-cluster \
            --region ${{ env.GCP_REGION }} \
            --project ${{ env.GCP_PROJECT_ID }}

      - name: Assign IAM roles to GCP SA (optional)
        if: env.ASSIGN_GCP_ROLES == 'true'
        run: |
          for role in artifactregistry.writer container.admin container.developer iam.serviceAccountTokenCreator; do
            gcloud projects add-iam-policy-binding ${{ env.GCP_PROJECT_ID }} \
              --member="serviceAccount:${{ env.GCP_SA_EMAIL }}" \
              --role="roles/$role" --quiet || echo "Role $role already assigned or skipped."
          done

      #################################################
      # --------------- AZURE SETUP ----------------- #
      #################################################
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}

      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AZURE_AKS_CLUSTER }}

      - name: Azure ACR Login
        run: az acr login --name ${{ env.AZURE_ACR_NAME }}

      - name: Assign Contributor role to Azure SP (optional)
        if: env.ASSIGN_AZURE_ROLES == 'true'
        run: |
          CLIENT_ID=$(echo '${{ secrets.AZURE_KEY }}' | jq -r '.clientId')
          SUB_ID=$(echo '${{ secrets.AZURE_KEY }}' | jq -r '.subscriptionId')
          ASSIGNEE_ID=$(az ad sp show --id "$CLIENT_ID" --query "id" -o tsv)
          ROLE_EXISTS=$(az role assignment list \
            --assignee "$ASSIGNEE_ID" \
            --scope "/subscriptions/$SUB_ID" \
            --query "[?roleDefinitionName=='Contributor']" -o tsv)
          if [[ -z "$ROLE_EXISTS" ]]; then
            echo "Assigning Contributor role..."
            az role assignment create \
              --assignee "$ASSIGNEE_ID" \
              --role Contributor \
              --scope "/subscriptions/$SUB_ID"
          else
            echo "Contributor role already exists."
          fi

      #################################################
      # ----------- BUILD & PUSH IMAGES ------------- #
      #################################################
      - name: Build Docker Image
        run: |
          docker build -t europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
                       -t ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push to GCP Artifact Registry
        run: docker push europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Push to Azure ACR
        run: docker push ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      #################################################
      # ---------------- DEPLOY GKE ----------------- #
      #################################################
      - name: Deploy to GKE
        run: |
          export IMAGE=europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          echo "Using GKE context: $(kubectl config current-context)"
          sed "s|PLACEHOLDER_IMAGE|$IMAGE|" k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment django-app

      - name: Cleanup Failed Pods and Old ReplicaSets in GKE
        run: |
          echo "🧹 Cleaning failed pods in GKE..."
          FAILED_PODS=$(kubectl get pods --field-selector=status.phase=Failed -o jsonpath="{.items[*].metadata.name}")
          if [[ -n "$FAILED_PODS" ]]; then
            kubectl delete pod $FAILED_PODS --ignore-not-found
          else
            echo "No failed pods to delete."
          fi

          echo "🧹 Cleaning unused ReplicaSets in GKE..."
          RS_TO_DELETE=$(kubectl get rs -l app=django-app -o json | jq -r '.items[] | select(.status.replicas==0 and .status.readyReplicas==0) | .metadata.name')
          for rs in $RS_TO_DELETE; do
            echo "Deleting unused RS: $rs"
            kubectl delete rs $rs
          done

      #################################################
      # ---------------- DEPLOY AKS ----------------- #
      #################################################
      - name: Deploy to AKS
        run: |
          export IMAGE=${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          echo "Using AKS context: $(kubectl config current-context)"
          sed "s|PLACEHOLDER_IMAGE|$IMAGE|" k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment django-app

      - name: Cleanup Failed Pods and Old ReplicaSets in AKS
        run: |
          echo "🧹 Cleaning failed pods in AKS..."
          FAILED_PODS=$(kubectl get pods --field-selector=status.phase=Failed -o jsonpath="{.items[*].metadata.name}")
          if [[ -n "$FAILED_PODS" ]]; then
            kubectl delete pod $FAILED_PODS --ignore-not-found
          else
            echo "No failed pods to delete."
          fi

          echo "🧹 Cleaning unused ReplicaSets in AKS..."
          RS_TO_DELETE=$(kubectl get rs -l app=django-app -o json | jq -r '.items[] | select(.status.replicas==0 and .status.readyReplicas==0) | .metadata.name')
          for rs in $RS_TO_DELETE; do
            echo "Deleting unused RS: $rs"
            kubectl delete rs $rs
          done
