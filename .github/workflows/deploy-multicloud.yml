name: Multi-Cloud Deploy (GCP, Azure, AWS)

on:
  push:
    branches: [ master ]

env:
  IMAGE_NAME: django-app
  GCP_PROJECT_ID: nci-research-project
  GCP_REGION: europe-west1
  AZURE_RESOURCE_GROUP: nci-azure-rg
  AZURE_AKS_CLUSTER: nci-aks-cluster
  AZURE_ACR_NAME: nciregistryacr
  AZURE_STORAGE_ACCOUNT: nciresearchstorage
  GCP_LOG_BUCKET: nci-deployment-logs
  AZURE_LOG_CONTAINER: deployment-logs
  AWS_REGION: eu-west-1
  AWS_LOG_BUCKET: nci-multicloud-logs-bucket

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v3

      - name: Set Image Tag
        id: set-tag
        run: echo "tag=commit-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Docker Buildx Setup
        uses: docker/setup-buildx-action@v3

      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: GCP Docker Auth
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}

      - name: Azure ACR Login
        run: az acr login --name ${{ env.AZURE_ACR_NAME }}

      - name: AWS Credentials Setup
        id: aws-creds
        run: |
          echo "AWS_ACCESS_KEY_ID=$(echo '${{ secrets.AWS_KEY }}' | jq -r .AccessKeyId)" >> $GITHUB_OUTPUT
          echo "AWS_SECRET_ACCESS_KEY=$(echo '${{ secrets.AWS_KEY }}' | jq -r .SecretAccessKey)" >> $GITHUB_OUTPUT
          echo "AWS_ACCOUNT_ID=$(echo '${{ secrets.AWS_KEY }}' | jq -r .AccountId)" >> $GITHUB_OUTPUT

      - name: AWS Auth
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ steps.aws-creds.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.aws-creds.outputs.AWS_SECRET_ACCESS_KEY }}

      - name: AWS ECR Login
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ steps.aws-creds.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build & Push Docker Image
        run: |
          docker build -t europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }} \
                       -t ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }} \
                       -t ${{ steps.aws-creds.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }} .
          docker push europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}
          docker push ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}
          docker push ${{ steps.aws-creds.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}

  deploy-gcp:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup GCloud + GKE Auth
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: gke-gcloud-auth-plugin

      - name: Authenticate GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials nci-research-cluster \
            --region ${{ env.GCP_REGION }} \
            --project ${{ env.GCP_PROJECT_ID }}
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Apply GCP Resources
        run: |
          START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          kubectl apply -f k8s/gcp/
          kubectl get pods --field-selector=status.phase!=Running -o name | xargs -r kubectl delete --force --grace-period=0
          sleep 10
          kubectl set image deployment/django-app django-container=europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/django-repo/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
          kubectl rollout status deployment django-app
          EXTERNAL_IP=$(kubectl get svc django-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "GCP External IP: $EXTERNAL_IP"
          echo "cloud,start_time,end_time,duration_seconds,status,external_ip" > log.csv
          echo "GCP,$START_TIME,$END_TIME,$(( $(date -d "$END_TIME" +%s) - $(date -d "$START_TIME" +%s) )),success,$EXTERNAL_IP" >> log.csv
          gsutil cp log.csv gs://${{ env.GCP_LOG_BUCKET }}/deploy-gcp-${{ github.run_id }}.csv

  deploy-azure:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}

      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AZURE_AKS_CLUSTER }}

      - name: Deploy to Azure
        run: |
          START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          kubectl apply -f k8s/azure/
          kubectl get pods --field-selector=status.phase!=Running -o name | xargs -r kubectl delete --force --grace-period=0
          sleep 10
          kubectl set image deployment/django-app django-container=${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
          kubectl rollout status deployment django-app
          EXTERNAL_IP=$(kubectl get svc django-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Azure External IP: $EXTERNAL_IP"
          echo "cloud,start_time,end_time,duration_seconds,status,external_ip" > log.csv
          echo "Azure,$START_TIME,$END_TIME,$(( $(date -d "$END_TIME" +%s) - $(date -d "$START_TIME" +%s) )),success,$EXTERNAL_IP" >> log.csv
          az storage blob upload \
            --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
            --container-name ${{ env.AZURE_LOG_CONTAINER }} \
            --name deploy-azure-${{ github.run_id }}.csv \
            --file log.csv \
            --auth-mode key \
            --account-key ${{ secrets.AZURE_STORAGE_KEY }}

  deploy-aws:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Parse AWS Creds
        id: aws-creds
        run: |
          echo "AWS_ACCESS_KEY_ID=$(echo '${{ secrets.AWS_KEY }}' | jq -r .AccessKeyId)" >> $GITHUB_OUTPUT
          echo "AWS_SECRET_ACCESS_KEY=$(echo '${{ secrets.AWS_KEY }}' | jq -r .SecretAccessKey)" >> $GITHUB_OUTPUT
          echo "AWS_ACCOUNT_ID=$(echo '${{ secrets.AWS_KEY }}' | jq -r .AccountId)" >> $GITHUB_OUTPUT

      - name: AWS Auth
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ steps.aws-creds.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.aws-creds.outputs.AWS_SECRET_ACCESS_KEY }}

      - name: Set EKS kubeconfig
        run: aws eks update-kubeconfig --name nci-research-eks --region ${{ env.AWS_REGION }}

      - name: Deploy to AWS
        run: |
          START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          kubectl apply -f k8s/aws/
          kubectl get pods --field-selector=status.phase!=Running -o name | xargs -r kubectl delete --force --grace-period=0
          sleep 10
          kubectl set image deployment/django-app django-container=${{ steps.aws-creds.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
          kubectl rollout status deployment django-app
          EXTERNAL_IP=$(kubectl get svc django-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "AWS External IP: $EXTERNAL_IP"
          echo "cloud,start_time,end_time,duration_seconds,status,external_ip" > log.csv
          echo "AWS,$START_TIME,$END_TIME,$(( $(date -d "$END_TIME" +%s) - $(date -d "$START_TIME" +%s) )),success,$EXTERNAL_IP" >> log.csv
          aws s3 cp log.csv s3://${{ env.AWS_LOG_BUCKET }}/deploy-aws-${{ github.run_id }}.csv

          